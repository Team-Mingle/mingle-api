plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "io.sentry.jvm.gradle" version "4.5.1"
}

group = 'community.mingle'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {

    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.3"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.0.4'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.auth0:java-jwt:4.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'software.amazon.awssdk:secretsmanager:2.20.16'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE' //s3
    implementation 'com.amplitude:java-sdk:1.+'
    implementation 'org.json:json:20201115'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'


    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'com.google.firebase:firebase-admin:6.8.1' //firebase
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly('com.mysql:mysql-connector-j')
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

//    implementation 'io.sentry:sentry-logback:7.8.0'
    implementation 'io.sentry:sentry-spring-boot-starter:7.8.5'
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'


sentry {
    // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
    // This enables source context, allowing you to see your source
    // code as part of your stack traces in Sentry.
    includeSourceContext = true

    org = "taehyun-h3"
    projectName = "java-spring-boot"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}

clean{
    delete file(generated)
}
